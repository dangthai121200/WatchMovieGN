Item 1: Consider static factory methods instead of constructors:
 - One advantage of static factory methods is that, unlike constructors, they
have names.
 - A second advantage of static factory methods is that, unlike constructors,
they are not required to create a new object each time theyâ€™re invoked
 - A third advantage of static factory methods is that, unlike constructors,
they can return an object of any subtype of their return type
 - A fourth advantage of static factories is that the class of the returned
object can vary from call to call as a function of the input parameters.
 - A fourth advantage of static factories is that the class of the returned
object can vary from call to call as a function of the input parameters.
 - The main limitation of providing only static factory methods is that
classes without public or protected constructors cannot be subclassed
 - A second shortcoming of static factory methods is that they are hard for
programmers to find

Item 2: Consider a builder when faced with many constructor parameters: page 31
 + Telescoping constructor pattern
  > Telescoping constructor pattern - does not scale well
  > In short, the telescoping constructor pattern works, but it is hard to write
	client code when there are many parameters, and harder still to read it
 + JavaBeans Pattern - allows inconsistency, mandates mutability
  > JavaBean may be in an inconsistent state partway through its construction
  > The JavaBeans pattern precludes the possibility of making a class immutable
 + Builder pattern
  > The Builder pattern simulates named optional parameters
  > The Builder pattern is well suited to class hierarchies
  > he Builder pattern is a good choice when designing classes whose constructors or static factories would have more than a handful of parameters
  
Item 3: Enforce the singleton property with a private constructor or an enum type
 + Making a class a singleton can make it difficult to test its clients
 + A single-element enum type is often the best way to implement a singleton
 
Item 4: Enforce noninstantiability with a private constructor
 + Attempting to enforce noninstantiability by making a class abstract does not work.
 + a class can be made noninstantiable by including a private constructor

Item 5: Prefer dependency injection to hardwiring resources
 + Static utility classes and singletons are inappropriate for classes whose behavior is parameterized by an underlying resource
 + pass the resource into the constructor when creating a new instance
 
Item 6: Avoid creating unnecessary objects